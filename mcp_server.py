# -*- coding: utf-8 -*-
"""
mcp_server.py: Демонстрационный MCP сервер

Этот скрипт запускает простой сервер Model Context Protocol (MCP)
с инструментом-калькулятором.
Он предназначен для демонстрации основ создания MCP сервера с помощью
библиотеки mcp-sdk.
"""

# %% [markdown]
# ## 1. Импорты и настройка сервера

# %%
from mcp.server.fastmcp import FastMCP

# Создаем экземпляр FastMCP сервера
# "WorkshopDemo" - это имя нашего сервера, которое увидят клиенты
mcp = FastMCP("WorkshopDemo")
print("[Server Setup] Экземпляр FastMCP('WorkshopDemo') создан.")

# %% [markdown]
# ## 2. Определение Инструментов (Tools)
#
# Инструменты - это функции, которые сервер предоставляет для вызова
# клиентом (часто LLM). Мы определим два инструмента:
#
# *   `add`: Складывает два числа.
# *   `subtract`: Вычитает второе число из первого.
# *   `multiply`: Умножает два числа.
#
# Декоратор `@mcp.tool()` регистрирует функцию как доступный MCP инструмент.
# Описания в docstring используются для информирования клиента о назначении
# и параметрах инструмента.

# %% [markdown]
# ### 2.1 Инструмент: Сложение (`add`)

# %%
@mcp.tool()
def add(a: float, b: float) -> str:
    """
    Складывает два числа.
    
    Args:
        a: Первое число
        b: Второе число
    
    Returns:
        Результат сложения в виде строки
    """
    print(f"[Server Tool:add] Получены числа: {a} и {b}")
    result = a + b
    print(f"[Server Tool:add] Результат сложения: {result}")
    return f"Результат сложения {a} + {b} = {result}"

# %% [markdown]
# ### 2.2 Инструмент: Вычитание (`subtract`)

# %%
@mcp.tool()
def subtract(a: float, b: float) -> str:
    """
    Вычитает второе число из первого.
    
    Args:
        a: Уменьшаемое
        b: Вычитаемое
    
    Returns:
        Результат вычитания в виде строки
    """
    print(f"[Server Tool:subtract] Получены числа: {a} и {b}")
    result = a - b
    print(f"[Server Tool:subtract] Результат вычитания: {result}")
    return f"Результат вычитания {a} - {b} = {result}"

# %% [markdown]
# ### 2.3 Инструмент: Умножение (`multiply`)

# %%
@mcp.tool()
def multiply(a: float, b: float) -> str:
    """
    Умножает два числа.
    
    Args:
        a: Первый множитель
        b: Второй множитель
    Returns:
        Результат умножения в виде строки
    """
    print(f"[Server Tool:multiply] Получены числа: {a} и {b}")
    result = a * b
    print(f"[Server Tool:multiply] Результат умножения: {result}")
    return f"Результат умножения {a} * {b} = {result}"

# %% [markdown]
# ## 3. Запуск Сервера
#
# Этот блок кода выполняется, только если скрипт запущен напрямую
# (а не импортирован как модуль).
# `mcp.run()` запускает сервер, который будет слушать входящие MCP запросы
# через стандартные потоки ввода/вывода (stdin/stdout).
# Это стандартный способ взаимодействия для MCP серверов, запускаемых
# клиентами "по требованию".

# %%
if __name__ == "__main__":
    print("[Server Main] Скрипт запущен напрямую. Запуск mcp.run()...")
    # Эта функция блокирует выполнение, пока клиент не отключится
    mcp.run()

""" End of mcp_server.py """
